--
-- PostgreSQL database dump
--

-- Dumped from database version 13.1
-- Dumped by pg_dump version 13.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: topology; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA topology;


ALTER SCHEMA topology OWNER TO postgres;

--
-- Name: SCHEMA topology; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA topology IS 'PostGIS Topology schema';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry and geography spatial types and functions';


--
-- Name: pgrouting; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgrouting WITH SCHEMA public;


--
-- Name: EXTENSION pgrouting; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgrouting IS 'pgRouting Extension';


--
-- Name: postgis_topology; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis_topology WITH SCHEMA topology;


--
-- Name: EXTENSION postgis_topology; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_topology IS 'PostGIS topology spatial types and functions';


--
-- Name: d_search(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.d_search(dist integer) RETURNS TABLE(name character varying, game_name character varying, b_time time without time zone, e_time time without time zone)
    LANGUAGE plpgsql
    AS $$ begin return query 	select  g.name, g.game_name, g.start_at, g.end_at 	from "user_location" u 	left join game_booth g on st_dwithin(u.geom, g.geom, dist) 	order by u.id, st_distance(u.geom, g.geom); end; $$;


ALTER FUNCTION public.d_search(dist integer) OWNER TO postgres;

--
-- Name: fr_search(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fr_search() RETURNS TABLE(fair_r character varying, costt bigint)
    LANGUAGE plpgsql
    AS $$ begin  return query Select "fairground_ride".type, "fairground_ride".cost from "fairground_ride"; end; $$;


ALTER FUNCTION public.fr_search() OWNER TO postgres;

--
-- Name: game_search(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.game_search() RETURNS TABLE(boothname character varying, gamename character varying, b_time time without time zone, e_time time without time zone)
    LANGUAGE plpgsql
    AS $$ begin return query 	select name, game_name, start_at, end_at 						from game_booth; end; $$;


ALTER FUNCTION public.game_search() OWNER TO postgres;

--
-- Name: tent_search(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.tent_search() RETURNS TABLE(boothname character varying, gamename character varying, b_time time without time zone, e_time time without time zone)
    LANGUAGE plpgsql
    AS $$ begin return query 	select name, game_name, start_at, end_at 						from game_booth; end; $$;


ALTER FUNCTION public.tent_search() OWNER TO postgres;

--
-- Name: tent_search(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.tent_search(eventname character varying) RETURNS TABLE(tentname character varying, b_time time without time zone, e_time time without time zone)
    LANGUAGE plpgsql
    AS $$ begin return query 	select name, start_at, end_at 						from tent_event 						where event_name = eventname; end; $$;


ALTER FUNCTION public.tent_search(eventname character varying) OWNER TO postgres;

--
-- Name: toilet_search(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.toilet_search(genderb character varying) RETURNS TABLE(toilettype character varying, toiletgeom public.geometry)
    LANGUAGE plpgsql
    AS $$ begin  return query select "Toilet".gender, "Toilet".geom from "Toilet", user_location where "Toilet".gender = genderb and "Toilet".geom && st_expand(user_location.geom,10) order by st_distance("Toilet".geom, user_location.geom) asc LIMIT 1; end; $$;


ALTER FUNCTION public.toilet_search(genderb character varying) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: Bin; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Bin" (
    id bigint NOT NULL,
    geom public.geometry(Point,4326)
);


ALTER TABLE public."Bin" OWNER TO postgres;

--
-- Name: Booth; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Booth" (
    id integer NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    osm_id character varying(10),
    name character varying(100)
);


ALTER TABLE public."Booth" OWNER TO postgres;

--
-- Name: Booth_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public."Booth_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Booth_id_seq" OWNER TO postgres;

--
-- Name: Booth_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public."Booth_id_seq" OWNED BY public."Booth".id;


--
-- Name: Tent; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Tent" (
    id integer NOT NULL,
    geom public.geometry(MultiPolygon,4326),
    tent_id bigint,
    osm_id character varying(10),
    name character varying(100),
    centroid public.geometry,
    longitude double precision,
    latitude double precision
);


ALTER TABLE public."Tent" OWNER TO postgres;

--
-- Name: Toilet; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Toilet" (
    id double precision NOT NULL,
    geom public.geometry(Point,4326),
    gender character varying(10)
);


ALTER TABLE public."Toilet" OWNER TO postgres;

--
-- Name: event; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.event (
    event_id integer NOT NULL,
    event_name character varying(40),
    host_name character varying(40),
    start_at time without time zone,
    end_at time without time zone,
    tent_id integer
);


ALTER TABLE public.event OWNER TO postgres;

--
-- Name: fairground_ride; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.fairground_ride (
    id bigint NOT NULL,
    geom public.geometry(Point,4326),
    type character varying(80),
    cost bigint
);


ALTER TABLE public.fairground_ride OWNER TO postgres;

--
-- Name: foot_path; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.foot_path (
    id integer NOT NULL,
    geom public.geometry(MultiLineString,4326),
    osm_id character varying(10),
    code integer,
    fclass character varying(28),
    name character varying(100),
    source integer,
    target integer,
    length double precision
);


ALTER TABLE public.foot_path OWNER TO postgres;

--
-- Name: foot_path_vertices_pgr; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.foot_path_vertices_pgr (
    id bigint NOT NULL,
    cnt integer,
    chk integer,
    ein integer,
    eout integer,
    the_geom public.geometry(Point,4326)
);


ALTER TABLE public.foot_path_vertices_pgr OWNER TO postgres;

--
-- Name: foot_path_vertices_pgr_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.foot_path_vertices_pgr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.foot_path_vertices_pgr_id_seq OWNER TO postgres;

--
-- Name: foot_path_vertices_pgr_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.foot_path_vertices_pgr_id_seq OWNED BY public.foot_path_vertices_pgr.id;


--
-- Name: game; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.game (
    id integer NOT NULL,
    game_name character varying(40),
    start_at time without time zone,
    end_at time without time zone,
    booth_id integer
);


ALTER TABLE public.game OWNER TO postgres;

--
-- Name: game_booth; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.game_booth (
    booth_id integer,
    name character varying(100),
    game_name character varying(40),
    start_at time without time zone,
    end_at time without time zone,
    geom public.geometry(MultiPolygon,4326),
    centroid public.geometry
);


ALTER TABLE public.game_booth OWNER TO postgres;

--
-- Name: tent_event; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tent_event (
    tent_id integer,
    name character varying(100),
    event_name character varying(40),
    start_at time without time zone,
    end_at time without time zone,
    geom public.geometry(MultiPolygon,4326)
);


ALTER TABLE public.tent_event OWNER TO postgres;

--
-- Name: user_location; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_location (
    id bigint NOT NULL,
    geom public.geometry(Point,4326),
    loc_id integer,
    longitude double precision,
    latitude double precision
);


ALTER TABLE public.user_location OWNER TO postgres;

--
-- Name: Booth id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Booth" ALTER COLUMN id SET DEFAULT nextval('public."Booth_id_seq"'::regclass);


--
-- Name: foot_path_vertices_pgr id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.foot_path_vertices_pgr ALTER COLUMN id SET DEFAULT nextval('public.foot_path_vertices_pgr_id_seq'::regclass);


--
-- Data for Name: Bin; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Bin" (id, geom) FROM stdin;
1	0101000020E6100000515206D78A172A40E1EC7C49CCE74740
2	0101000020E6100000707EC04647172A403C86BDA8B8E74740
3	0101000020E61000006E7163E533172A4040AE1E71C6E74740
4	0101000020E6100000BACABAF86D172A40F7EA8B8FC3E74740
5	0101000020E6100000FC0CF5A5A8172A4075CEFBD2C0E74740
7	0101000020E610000016C5F8BDE7172A40DD635AE7ABE74740
8	0101000020E610000076AFD6D70A172A4053E7AEA8BEE74740
9	0101000020E61000007D1F64FECF172A402B0DD2DAB7E74740
11	0101000020E6100000ED3CE07827182A4000BF78E0AEE74740
12	0101000020E6100000CDD921EA02182A404ECEF009C7E74740
13	0101000020E61000008B3EC73940182A4043602C5EB8E74740
\.


--
-- Data for Name: Booth; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Booth" (id, geom, osm_id, name) FROM stdin;
1	0106000020E610000001000000010300000001000000070000008A13A97A43172A40D08547D1B9E74740392A37514B172A405A482CCEBDE747401119A07E61172A4057A59993BCE747401BA5017278172A40C3471F4EBBE747406D8E739B70172A4035853A51B7E74740BCD28D0B62172A403C9E961FB8E747408A13A97A43172A40D08547D1B9E74740	440	DuckDuck
2	0106000020E6100000010000000103000000010000000600000032B6B52A2E172A409FB437F8C2E74740AEC1B11D42172A40689D02AAC9E7474044311E4A59172A40A6D590B8C7E747401F662FDB4E172A408E15FC36C4E74740C525225745172A40482DEF05C1E7474032B6B52A2E172A409FB437F8C2E74740	449	Bravi
3	0106000020E610000001000000010300000001000000060000006E4CAA1155172A40F61D68AACCE747401CB3EC4960172A40D5B09586D0E747402D443D3377172A401E2114A5CEE74740B254281C8B172A4095715303CDE74740B2EF8AE07F172A40B4DE2527C9E747406E4CAA1155172A40F61D68AACCE74740	442	Chromiu
4	0106000020E61000000100000001030000000100000006000000127D3ECA88172A40312DA006C2E74740B4017DC795172A40CFE4AC99C6E747409048803FA1172A40A7A0FDA3CAE7474020634914B5172A40456BFB0DC9E747405299AC9B9C172A40CCF79D70C0E74740127D3ECA88172A40312DA006C2E74740	441	Foxxy
\.


--
-- Data for Name: Tent; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Tent" (id, geom, tent_id, osm_id, name, centroid, longitude, latitude) FROM stdin;
1	0106000020E61000000100000001030000000100000008000000D9FF4AF8EF172A40529BA49EAAE74740388A07EF06182A4020B7706AB1E74740F0CF566F1E182A400B957F2DAFE74740B85043650D182A4083950A2AAAE74740CB57135509182A409B674705A9E747407979951007182A4019FFF455A8E7474002F8020EFC172A40AD2E5D77A9E74740D9FF4AF8EF172A40529BA49EAAE74740	43	417	Jazz and Chill	0101000020E61000003EA2522C07182A40C4A4B0E5ACE74740	13.04692972668374	47.8099639046209
2		35	420	Main Tent	0101000020E610000048510685E6172A403847597AC3E74740	13.04668060018652	47.8106530128411
3	0106000020E610000001000000010300000001000000060000005E121DB8B9172A40D710E335AFE74740902FA182C3172A4056B08D78B2E74740ED5FB422C5172A40EB415255B2E74740E2B77C7FDE172A408654072FB0E74740B29AF8B4D4172A400CB55CECACE747405E121DB8B9172A40D710E335AFE74740	41	422	Movie Tent	0101000020E6100000FEC7CD1BCC172A406A0D77B2AFE74740	13.046479100103166	47.81004935086351
4	0106000020E610000001000000010300000001000000060000001110DDFD3B182A40D4F2CAF5B6E74740B2DCD26A48182A40444C50C3B7E747405EB3A6C354182A408F26288FB8E7474018AC38D55A182A4035B984E8B5E74740EFDE516342182A40FE023054B4E747401110DDFD3B182A40D4F2CAF5B6E74740	45	424	Food Area	0101000020E6100000B78B677C4B182A40BF7E2E71B6E74740	13.047450912132133	47.81025519151944
5	0106000020E61000000100000001030000000100000009000000A991FA61C9172A4056C51FBAB3E747407CD5253ED2172A402A9501B1B6E7474096D6F03ED8172A400A96FB2EB6E747407F5AA038DB172A40A097512CB7E7474035D3BD4EEA172A40E3BA29E5B5E7474086747808E3172A403EB03E79B3E74740A752584EE7172A404A5EF81CB3E74740274E6069E2172A40136E1588B1E74740A991FA61C9172A4056C51FBAB3E74740	39	430	Info Desk	0101000020E61000006DF19DBEDA172A4067E19977B4E74740	13.04659076383606	47.81019492162414
\.


--
-- Data for Name: Toilet; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Toilet" (id, geom, gender) FROM stdin;
1	0101000020E61000006397E38FE0172A40C2B1688DC9E74740	Male
2	0101000020E61000000983D9C9C0172A40553CD5BFBEE74740	Female
3	0101000020E6100000A33DA9622C172A40AB434E39C0E74740	Female
4	0101000020E6100000039E45794A172A406789AFBBCAE74740	Male
6	0101000020E6100000FA53BF8521182A40F19E4960ADE74740	Male
8	0101000020E6100000CC08C59712182A4007590FC3A8E74740	Female
\.


--
-- Data for Name: event; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.event (event_id, event_name, host_name, start_at, end_at, tent_id) FROM stdin;
1	Dolitle Magic	Harry Potter	08:00:00	10:00:00	2
2	Jerry and Comics	Jerry	12:00:00	14:00:00	2
3	Hong Kong	Movie	08:00:00	12:00:00	3
4	Jurassic Park	Movie	13:00:00	17:00:00	3
5	Jazz n Soul	Kenny G	13:00:00	17:00:00	1
6	Rock Pop	Avici	12:00:00	17:00:00	1
8	Information Desk	Sarah	07:00:00	18:00:00	5
7	Lunch	Gary	12:00:00	13:00:00	4
\.


--
-- Data for Name: fairground_ride; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.fairground_ride (id, geom, type, cost) FROM stdin;
1	0101000020E6100000A4F643B13B172A406A80EC2ED0E74740	Roller Coaster	1
2	0101000020E6100000CA02A3F335172A4009B6350DBDE74740	Carousel	1
3	0101000020E6100000F5C95B8E93172A40E2C1F7BFBCE74740	Ali Baba	0
4	0101000020E61000003DC7A83913172A40F7D519C2C8E74740	Fun Slide	0
6	0101000020E61000000B01A5989C172A408B75DCB1CDE74740	Kamikaze	2
\.


--
-- Data for Name: foot_path; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.foot_path (id, geom, osm_id, code, fclass, name, source, target, length) FROM stdin;
1	0105000020E61000000100000001020000000700000067CF656A12182A40084158D7B2E7474092944FEA26182A401A436C55B7E747402E54596F2F182A40FBF087FAB8E747404685FB123B182A403D559632BAE747407DCF488446182A4006AD7603BBE747406CB98ECC7E182A4093E52494BEE747405D24480092182A40DFDE90A1BEE74740	24429115	5122	residential	Philipp-Harpff-Straße	1	2	86.89920560719376
2	0105000020E610000001000000010200000002000000B18F04D0DE172A4090D96A20A7E74740A66C472701182A4075B5CB6DB1E74740	35771285	5153	footway	Phlipp-Harpf-Straße	3	4	40.08841032972828
3	0105000020E6100000010000000102000000020000002396DE48EA162A40BC34FBF2B8E74740E52ED3403D172A409CFAF664B4E74740	36839012	5113	primary	Saint-Julien-Straße	5	6	49.8662112240213
4	0105000020E610000001000000010200000004000000A66C472701182A4075B5CB6DB1E74740F345D67503182A404A4A8B44B2E747404CCE9A690C182A4073E3DD91B1E7474067CF656A12182A40084158D7B2E74740	37967209	5155	steps	Phlipp-Harpf-Straße	4	1	14.285657900722455
5	0105000020E6100000010000000102000000020000004F3F034587172A40AAA0B316B0E74740C5A0B88894172A408CE96404AFE74740	48845928	5113	primary	Gabelsbergerstraße	7	8	8.406660212110303
6	0105000020E6100000010000000102000000040000004F3F034587172A40AAA0B316B0E74740F2DB210F8E172A40E065868DB2E747400D9535A094172A408A7560EFB4E74740274E49319B172A409FC56350B7E74740	72730358	5122	residential	Weiserstraße	7	9	27.031009313132422
7	0105000020E61000000100000001020000000E000000EAB35E679E172A403B5A9C31CCE74740BAFE6ECB91172A40862C770BC9E74740E9818FC18A172A4008CF4BC5C6E747407FF7E9D385172A40BE852B56C3E747404D7ACECC82172A40CA391D6DC1E7474091813CBB7C172A4038DCA227C0E747407BAD3A6178172A406BADE584BFE747406E1EE27A6F172A4026D30DB9BEE74740BB6AF9DC64172A404A1FBAA0BEE74740078F368E58172A405BE6CF12BFE74740F6657AD33E172A400CCD8646C1E747406308008E3D172A4055C1035EC1E7474069C82E0730172A4096C4FE57C2E747406F2BBD361B172A40E6CF12BFBDE74740	159695628	5141	service	\N	10	11	113.44928087572443
8	0105000020E61000000100000001020000000300000089D70638CE172A40C735AA78C8E74740EAB35E679E172A403B5A9C31CCE74740898741AA72172A40597B44F1CFE74740	159695630	5141	service	\N	12	13	58.14478956431708
9	0105000020E610000001000000010200000006000000BCA7BC676E172A401EF3B7F3B3E747405B1A097E65172A4037EDCE7FB4E747408B05BEA25B172A40591FD61BB5E74740A02F624447172A400B96FB2EB6E74740370653831F172A4088F32675B8E747405E75898FF4162A403C0DDFC2BAE74740	197366476	5152	cycleway	\N	14	15	73.36857975246821
10	0105000020E61000000100000001020000000300000048C3842C66172A40DF71F673AFE74740E5C2482F6A172A401F41A7D6B1E74740BCA7BC676E172A401EF3B7F3B3E74740	197366479	5152	cycleway	\N	16	14	15.978808381818734
11	0105000020E6100000010000000102000000030000006AD322EC25172A40E3BCEE63BBE7474057C4550A26172A40CD0946CABBE747406308008E3D172A4055C1035EC1E74740	200201584	5153	footway	\N	17	18	24.567254720143815
12	0105000020E610000001000000010200000002000000370653831F172A4088F32675B8E74740660EEE7321172A4010BD8C62B9E74740	200201585	5153	footway	\N	19	20	3.3361269321055715
13	0105000020E610000001000000010200000002000000660EEE7321172A4010BD8C62B9E747406AD322EC25172A40E3BCEE63BBE74740	200688889	5155	steps	\N	20	17	7.268148241733525
14	0105000020E610000001000000010200000008000000C5A0B88894172A408CE96404AFE747408DE0EB10A4172A4078ADCE7BADE74740010DDBBBAB172A402CCE07BAACE74740401361C3D3172A4078072E45A8E74740B18F04D0DE172A4090D96A20A7E7474058E36C3A02182A4028ED6877A3E747409D28AECF41182A405A5BD3179DE747401131CAD875182A40DF934E2498E74740	202424719	5113	primary	Gabelsbergerstraße	8	21	150.37936904208468
15	0105000020E610000001000000010200000002000000E5C2482F6A172A401F41A7D6B1E747404F3F034587172A40AAA0B316B0E74740	202424720	5113	primary	Saint-Julien-Straße	22	7	17.64874950890106
16	0105000020E6100000010000000102000000020000001E92109B7E172A409E5A8EA1ADE747404F3F034587172A40AAA0B316B0E74740	202424721	5122	residential	Weiserstraße	23	7	9.697910805028195
17	0105000020E610000001000000010200000003000000274E49319B172A409FC56350B7E74740257E20D4A0172A40EEE6A90EB9E74740CE3C1460B3172A408FF9916CBFE74740	202424722	5122	residential	Weiserstraße	9	24	30.798199960829752
21	0105000020E6100000010000000102000000020000000CCC0A45BA172A409F06674BB1E74740010DDBBBAB172A402CCE07BAACE74740	202424726	5141	service	\N	25	26	17.58483233938095
22	0105000020E6100000010000000102000000080000000CCC0A45BA172A409F06674BB1E74740CAB4A272B8172A40E07F2BD9B1E7474024485B4BB7172A40B414EBAFB2E74740319AF0A6B6172A409C42AED4B3E747400E0CC5C2B5172A40F0B09AF8B4E747407034DB70B3172A40303ECC5EB6E747402EADE17DB0172A407674C872B7E74740257E20D4A0172A40EEE6A90EB9E74740	202424728	5141	service	\N	25	27	32.31105272302049
23	0105000020E610000001000000010200000003000000E52ED3403D172A409CFAF664B4E74740D651D50451172A40B5CC3340B3E74740E5C2482F6A172A401F41A7D6B1E74740	202745532	5113	primary	Saint-Julien-Straße	6	22	27.10072047798441
24	0105000020E610000001000000010200000005000000CE3C1460B3172A408FF9916CBFE747403487FFCFBC172A40FA5B5DA9C2E74740779373BDC8172A4070DC73AAC6E7474089D70638CE172A40C735AA78C8E74740068662E1DA172A40C9EE6E0AD0E74740	553743456	5122	residential	Weiserstraße	24	28	61.00186654459653
25	0105000020E610000001000000010200000002000000068662E1DA172A40C9EE6E0AD0E74740332669A3DF172A40E830708AD8E74740	553743457	5122	residential	Weiserstraße	28	29	28.969675490939824
26	0105000020E6100000010000000102000000040000008C6BAE0730172A401997F857C2E74740E6F4B74220172A406CA64EA2C3E74740B31AD84811172A40EAC956EDC4E7474040C90C7457172A4079FFAC06D3E74740	202743673	\N	\N	\N	30	31	82.0561964046071
644	0105000020E610000001000000010200000002000000425B69DF53172A4056B6B384B5E747403CC6191A5E172A40153B878CBAE74740	356	4657	dgfhn	rfymjk	32	33	18.04256872045743
1234	0105000020E6100000010000000102000000020000002797AB4CC6172A405561B4D8C5E74740CD4BB273E6172A40DE7D087BC3E74740	4356787	3245	dsfvgmh	bnhfm	34	35	20.050046490646196
234	0105000020E6100000010000000102000000020000007E289C54BF172A406924C581C3E74740B59987EE9E172A408335B389C5E74740	5467586	4356	dmj	djmky	36	37	19.7545147661589
232	0105000020E610000001000000010200000002000000055AF394FE172A4045164CA8B0E74740E2FDA8E0DA172A40E9D6EF75B4E74740	536879	3566	gvdn	cdfgnm	38	39	24.141371094414545
75	0105000020E61000000100000001020000000200000041898C5ABC172A4030A75BE0AAE74740306DDFC1CB172A40449FE4B5AFE74740	45678	565768	gbhfm	dcgnfm	40	41	18.615377310940886
76	0105000020E610000001000000010200000002000000B1937BFDF7172A40F88D0EAEAEE74740C1F2FB2A07182A40920E8BE6ACE74740	43546	35647	bgdn	dfbnm	42	43	10.5676280218345
213	0105000020E61000000100000001020000000200000022697B0944182A4068CE32D6BAE74740306D097A4B182A40BFF27973B6E74740	435678	34657	gsrbhngjm	cngfm 	44	45	15.476439238783957
64	0105000020E610000001000000010200000002000000DDA01A277E172A40D41CDE73C0E74740C0F2E9BD43172A4009625156C5E74740	23654	78654	ghnjm	gfnm	46	47	37.26607529909579
98	0105000020E6100000010000000102000000020000004CCC00B375172A40FD21B2AECFE747408A35CD1070172A4086B5DDD8CCE74740	546789	38	sgdbfhn	sbhnm	48	49	10.144801778124375
86	0105000020E610000001000000010200000002000000A90123B71C172A40763C5139C7E74740ED56003413172A40306DD0BFC8E74740	43578	456896	dhnjmk	bhn	50	51	7.505617636536263
80	0105000020E610000001000000010200000002000000A1713A3744172A40BE572229CFE747409EE7A0B63B172A40E2FDF32CD0E74740	4578	47895	jmgk, gn	sxmjk,	52	53	5.955153556516003
754	0105000020E610000001000000010200000002000000E4FD9C3F9A172A403B465B94CCE74740CE4B12979C172A4052783DB3CDE74740	87654	34567	hnjm 	xsgmh	54	55	4.031050378623356
\.


--
-- Data for Name: foot_path_vertices_pgr; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.foot_path_vertices_pgr (id, cnt, chk, ein, eout, the_geom) FROM stdin;
1	\N	\N	\N	\N	0101000020E610000067CF656A12182A40084158D7B2E74740
2	\N	\N	\N	\N	0101000020E61000005D24480092182A40DFDE90A1BEE74740
3	\N	\N	\N	\N	0101000020E6100000B18F04D0DE172A4090D96A20A7E74740
4	\N	\N	\N	\N	0101000020E6100000A66C472701182A4075B5CB6DB1E74740
5	\N	\N	\N	\N	0101000020E61000002396DE48EA162A40BC34FBF2B8E74740
6	\N	\N	\N	\N	0101000020E6100000E52ED3403D172A409CFAF664B4E74740
7	\N	\N	\N	\N	0101000020E61000004F3F034587172A40AAA0B316B0E74740
8	\N	\N	\N	\N	0101000020E6100000C5A0B88894172A408CE96404AFE74740
9	\N	\N	\N	\N	0101000020E6100000274E49319B172A409FC56350B7E74740
10	\N	\N	\N	\N	0101000020E6100000EAB35E679E172A403B5A9C31CCE74740
11	\N	\N	\N	\N	0101000020E61000006F2BBD361B172A40E6CF12BFBDE74740
12	\N	\N	\N	\N	0101000020E610000089D70638CE172A40C735AA78C8E74740
13	\N	\N	\N	\N	0101000020E6100000898741AA72172A40597B44F1CFE74740
14	\N	\N	\N	\N	0101000020E6100000BCA7BC676E172A401EF3B7F3B3E74740
15	\N	\N	\N	\N	0101000020E61000005E75898FF4162A403C0DDFC2BAE74740
16	\N	\N	\N	\N	0101000020E610000048C3842C66172A40DF71F673AFE74740
17	\N	\N	\N	\N	0101000020E61000006AD322EC25172A40E3BCEE63BBE74740
18	\N	\N	\N	\N	0101000020E61000006308008E3D172A4055C1035EC1E74740
19	\N	\N	\N	\N	0101000020E6100000370653831F172A4088F32675B8E74740
20	\N	\N	\N	\N	0101000020E6100000660EEE7321172A4010BD8C62B9E74740
21	\N	\N	\N	\N	0101000020E61000001131CAD875182A40DF934E2498E74740
22	\N	\N	\N	\N	0101000020E6100000E5C2482F6A172A401F41A7D6B1E74740
23	\N	\N	\N	\N	0101000020E61000001E92109B7E172A409E5A8EA1ADE74740
24	\N	\N	\N	\N	0101000020E6100000CE3C1460B3172A408FF9916CBFE74740
25	\N	\N	\N	\N	0101000020E61000000CCC0A45BA172A409F06674BB1E74740
26	\N	\N	\N	\N	0101000020E6100000010DDBBBAB172A402CCE07BAACE74740
27	\N	\N	\N	\N	0101000020E6100000257E20D4A0172A40EEE6A90EB9E74740
28	\N	\N	\N	\N	0101000020E6100000068662E1DA172A40C9EE6E0AD0E74740
29	\N	\N	\N	\N	0101000020E6100000332669A3DF172A40E830708AD8E74740
30	\N	\N	\N	\N	0101000020E61000008C6BAE0730172A401997F857C2E74740
31	\N	\N	\N	\N	0101000020E610000040C90C7457172A4079FFAC06D3E74740
32	\N	\N	\N	\N	0101000020E6100000425B69DF53172A4056B6B384B5E74740
33	\N	\N	\N	\N	0101000020E61000003CC6191A5E172A40153B878CBAE74740
34	\N	\N	\N	\N	0101000020E61000002797AB4CC6172A405561B4D8C5E74740
35	\N	\N	\N	\N	0101000020E6100000CD4BB273E6172A40DE7D087BC3E74740
36	\N	\N	\N	\N	0101000020E61000007E289C54BF172A406924C581C3E74740
37	\N	\N	\N	\N	0101000020E6100000B59987EE9E172A408335B389C5E74740
38	\N	\N	\N	\N	0101000020E6100000055AF394FE172A4045164CA8B0E74740
39	\N	\N	\N	\N	0101000020E6100000E2FDA8E0DA172A40E9D6EF75B4E74740
40	\N	\N	\N	\N	0101000020E610000041898C5ABC172A4030A75BE0AAE74740
41	\N	\N	\N	\N	0101000020E6100000306DDFC1CB172A40449FE4B5AFE74740
42	\N	\N	\N	\N	0101000020E6100000B1937BFDF7172A40F88D0EAEAEE74740
43	\N	\N	\N	\N	0101000020E6100000C1F2FB2A07182A40920E8BE6ACE74740
44	\N	\N	\N	\N	0101000020E610000022697B0944182A4068CE32D6BAE74740
45	\N	\N	\N	\N	0101000020E6100000306D097A4B182A40BFF27973B6E74740
46	\N	\N	\N	\N	0101000020E6100000DDA01A277E172A40D41CDE73C0E74740
47	\N	\N	\N	\N	0101000020E6100000C0F2E9BD43172A4009625156C5E74740
48	\N	\N	\N	\N	0101000020E61000004CCC00B375172A40FD21B2AECFE74740
49	\N	\N	\N	\N	0101000020E61000008A35CD1070172A4086B5DDD8CCE74740
50	\N	\N	\N	\N	0101000020E6100000A90123B71C172A40763C5139C7E74740
51	\N	\N	\N	\N	0101000020E6100000ED56003413172A40306DD0BFC8E74740
52	\N	\N	\N	\N	0101000020E6100000A1713A3744172A40BE572229CFE74740
53	\N	\N	\N	\N	0101000020E61000009EE7A0B63B172A40E2FDF32CD0E74740
54	\N	\N	\N	\N	0101000020E6100000E4FD9C3F9A172A403B465B94CCE74740
55	\N	\N	\N	\N	0101000020E6100000CE4B12979C172A4052783DB3CDE74740
\.


--
-- Data for Name: game; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.game (id, game_name, start_at, end_at, booth_id) FROM stdin;
1	Pick a Duck	08:00:00	12:00:00	1
2	Water Coin Drop	13:00:00	17:00:00	3
3	Balloon Pop	12:00:00	17:00:00	4
4	Spin the Wheel	09:30:00	14:00:00	2
\.


--
-- Data for Name: game_booth; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.game_booth (booth_id, name, game_name, start_at, end_at, geom, centroid) FROM stdin;
1	DuckDuck	Pick a Duck	08:00:00	12:00:00	0106000020E610000001000000010300000001000000070000008A13A97A43172A40D08547D1B9E74740392A37514B172A405A482CCEBDE747401119A07E61172A4057A59993BCE747401BA5017278172A40C3471F4EBBE747406D8E739B70172A4035853A51B7E74740BCD28D0B62172A403C9E961FB8E747408A13A97A43172A40D08547D1B9E74740	0101000020E6100000F4994BF65D172A4003C8A68FBAE74740
3	Chromiu	Water Coin Drop	13:00:00	17:00:00	0106000020E610000001000000010300000001000000060000006E4CAA1155172A40F61D68AACCE747401CB3EC4960172A40D5B09586D0E747402D443D3377172A401E2114A5CEE74740B254281C8B172A4095715303CDE74740B2EF8AE07F172A40B4DE2527C9E747406E4CAA1155172A40F61D68AACCE74740	0101000020E6100000D9621B1670172A403C78CCD6CCE74740
4	Foxxy	Balloon Pop	12:00:00	17:00:00	0106000020E61000000100000001030000000100000006000000127D3ECA88172A40312DA006C2E74740B4017DC795172A40CFE4AC99C6E747409048803FA1172A40A7A0FDA3CAE7474020634914B5172A40456BFB0DC9E747405299AC9B9C172A40CCF79D70C0E74740127D3ECA88172A40312DA006C2E74740	0101000020E6100000F50DDAEE9E172A406AE6638AC5E74740
2	Bravi	Spin the Wheel	09:30:00	14:00:00	0106000020E6100000010000000103000000010000000600000032B6B52A2E172A409FB437F8C2E74740AEC1B11D42172A40689D02AAC9E7474044311E4A59172A40A6D590B8C7E747401F662FDB4E172A408E15FC36C4E74740C525225745172A40482DEF05C1E7474032B6B52A2E172A409FB437F8C2E74740	0101000020E61000002786F4BA43172A4034D51258C5E74740
\.


--
-- Data for Name: spatial_ref_sys; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.spatial_ref_sys (srid, auth_name, auth_srid, srtext, proj4text) FROM stdin;
\.


--
-- Data for Name: tent_event; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tent_event (tent_id, name, event_name, start_at, end_at, geom) FROM stdin;
2	Main Tent	Dolitle Magic	08:00:00	10:00:00	
2	Main Tent	Jerry and Comics	12:00:00	14:00:00	
3	Movie Tent	Hong Kong	08:00:00	12:00:00	0106000020E610000001000000010300000001000000060000005E121DB8B9172A40D710E335AFE74740902FA182C3172A4056B08D78B2E74740ED5FB422C5172A40EB415255B2E74740E2B77C7FDE172A408654072FB0E74740B29AF8B4D4172A400CB55CECACE747405E121DB8B9172A40D710E335AFE74740
3	Movie Tent	Jurassic Park	13:00:00	17:00:00	0106000020E610000001000000010300000001000000060000005E121DB8B9172A40D710E335AFE74740902FA182C3172A4056B08D78B2E74740ED5FB422C5172A40EB415255B2E74740E2B77C7FDE172A408654072FB0E74740B29AF8B4D4172A400CB55CECACE747405E121DB8B9172A40D710E335AFE74740
1	Jazz and Chill	Jazz n Soul	13:00:00	17:00:00	0106000020E61000000100000001030000000100000008000000D9FF4AF8EF172A40529BA49EAAE74740388A07EF06182A4020B7706AB1E74740F0CF566F1E182A400B957F2DAFE74740B85043650D182A4083950A2AAAE74740CB57135509182A409B674705A9E747407979951007182A4019FFF455A8E7474002F8020EFC172A40AD2E5D77A9E74740D9FF4AF8EF172A40529BA49EAAE74740
1	Jazz and Chill	Rock Pop	12:00:00	17:00:00	0106000020E61000000100000001030000000100000008000000D9FF4AF8EF172A40529BA49EAAE74740388A07EF06182A4020B7706AB1E74740F0CF566F1E182A400B957F2DAFE74740B85043650D182A4083950A2AAAE74740CB57135509182A409B674705A9E747407979951007182A4019FFF455A8E7474002F8020EFC172A40AD2E5D77A9E74740D9FF4AF8EF172A40529BA49EAAE74740
5	Info Desk	Information Desk	07:00:00	18:00:00	0106000020E61000000100000001030000000100000009000000A991FA61C9172A4056C51FBAB3E747407CD5253ED2172A402A9501B1B6E7474096D6F03ED8172A400A96FB2EB6E747407F5AA038DB172A40A097512CB7E7474035D3BD4EEA172A40E3BA29E5B5E7474086747808E3172A403EB03E79B3E74740A752584EE7172A404A5EF81CB3E74740274E6069E2172A40136E1588B1E74740A991FA61C9172A4056C51FBAB3E74740
4	Food Area	Lunch	12:00:00	13:00:00	0106000020E610000001000000010300000001000000060000001110DDFD3B182A40D4F2CAF5B6E74740B2DCD26A48182A40444C50C3B7E747405EB3A6C354182A408F26288FB8E7474018AC38D55A182A4035B984E8B5E74740EFDE516342182A40FE023054B4E747401110DDFD3B182A40D4F2CAF5B6E74740
\.


--
-- Data for Name: user_location; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_location (id, geom, loc_id, longitude, latitude) FROM stdin;
1	0101000020E61000006F289F2587172A407BE25023B0E74740	1	13.04595296447607	47.81006280374
\.


--
-- Data for Name: topology; Type: TABLE DATA; Schema: topology; Owner: postgres
--

COPY topology.topology (id, name, srid, "precision", hasz) FROM stdin;
\.


--
-- Data for Name: layer; Type: TABLE DATA; Schema: topology; Owner: postgres
--

COPY topology.layer (topology_id, layer_id, schema_name, table_name, feature_column, feature_type, level, child_id) FROM stdin;
\.


--
-- Name: Booth_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Booth_id_seq"', 4, true);


--
-- Name: foot_path_vertices_pgr_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.foot_path_vertices_pgr_id_seq', 55, true);


--
-- Name: Bin Bin_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Bin"
    ADD CONSTRAINT "Bin_pkey" PRIMARY KEY (id);


--
-- Name: Booth Booth_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Booth"
    ADD CONSTRAINT "Booth_pkey" PRIMARY KEY (id);


--
-- Name: Tent Tent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Tent"
    ADD CONSTRAINT "Tent_pkey" PRIMARY KEY (id);


--
-- Name: Toilet Toilet_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Toilet"
    ADD CONSTRAINT "Toilet_pkey" PRIMARY KEY (id);


--
-- Name: event event_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event
    ADD CONSTRAINT event_pkey PRIMARY KEY (event_id);


--
-- Name: fairground_ride fairground_ride_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.fairground_ride
    ADD CONSTRAINT fairground_ride_pkey PRIMARY KEY (id);


--
-- Name: foot_path foot_path_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.foot_path
    ADD CONSTRAINT foot_path_pkey PRIMARY KEY (id);


--
-- Name: foot_path_vertices_pgr foot_path_vertices_pgr_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.foot_path_vertices_pgr
    ADD CONSTRAINT foot_path_vertices_pgr_pkey PRIMARY KEY (id);


--
-- Name: game game_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.game
    ADD CONSTRAINT game_pkey PRIMARY KEY (id);


--
-- Name: user_location user_location_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_location
    ADD CONSTRAINT user_location_pkey PRIMARY KEY (id);


--
-- Name: booth_geom_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX booth_geom_idx ON public."Booth" USING gist (geom);


--
-- Name: event__idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX event__idx ON public.event USING btree (event_name);


--
-- Name: foot_path_geom_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX foot_path_geom_idx ON public.foot_path USING gist (geom);


--
-- Name: foot_path_source_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX foot_path_source_idx ON public.foot_path USING btree (source);


--
-- Name: foot_path_target_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX foot_path_target_idx ON public.foot_path USING btree (target);


--
-- Name: foot_path_vertices_pgr_the_geom_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX foot_path_vertices_pgr_the_geom_idx ON public.foot_path_vertices_pgr USING gist (the_geom);


--
-- Name: game__idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX game__idx ON public.game USING btree (game_name);


--
-- Name: game_booth_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX game_booth_idx ON public.game_booth USING gist (geom);


--
-- Name: idx_tent_geom; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tent_geom ON public."Tent" USING gist (geom);


--
-- Name: idx_user_geom; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_geom ON public.user_location USING gist (geom);


--
-- Name: tent_geom_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tent_geom_idx ON public."Tent" USING btree (name);


--
-- PostgreSQL database dump complete
--

